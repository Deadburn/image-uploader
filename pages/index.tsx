import Head from "next/head";
import Image from "next/image";
import { Poppins } from "@next/font/google";
import ImageCard from "@/components/ImageCard";
import Uploaded from "@/components/Uploaded";
import Progress from "@/components/Progress";
import { useState } from "react";
import axios from "axios";

const poppins = Poppins({
  weight: ["400", "700"],
  style: ["normal", "italic"],
  subsets: ["latin"],
});

export default function Home() {
  const [file, setFile] = useState(null);
  const [loading, setLoading] = useState(false);
  const [data, setData] = useState(null);

  const handleDrop = (event: any) => {
    event.preventDefault();
    setFile(event.dataTransfer.files[0]);

    const formData = new FormData();

    formData.append("file", event.dataTransfer.files[0]);
    formData.append("upload_preset", "devto-imageU");

    setLoading(true);

    handleUpload(formData);
  };

  const handleFileChange = (event: any) => {
    setFile(event.target.files[0]);
    // formdata oluştur ekle ve formdata'ya 'upload_preset' değerine 'devto-imageU' değerini ekle
    // debugger;
    const formData = new FormData();
    formData.append("file", event.target.files[0]);
    formData.append("upload_preset", "devto-imageU");

    setLoading(true);

    handleUpload(formData);
  };

  const handleUpload = async (formData: any) => {
    try {
      const uploadRes = await axios.post(
        "https://api.cloudinary.com/v1_1/dzs6x9aee/image/upload",
        formData
      );

      setData(uploadRes?.data);

      setLoading(false);
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <div className="App">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {!loading && !file && (
        <ImageCard
          file={file}
          handleFileChange={handleFileChange}
          handleDrop={handleDrop}
        />
      )}

      {loading && <Progress />}

      {file && !loading && <Uploaded data={data} />}
    </div>
  );
}
